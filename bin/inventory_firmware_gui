#!/usr/bin/python2
# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:
"""
    this is the documentation...
"""

# import arranged alphabetically
import commands
import cStringIO
import getopt
from gettext import gettext as _
import os
import pygtk
import sys
import traceback

pygtk.require('2.0')
import gtk, gtk.glade, pango
import gobject
import gnome.ui

import firmwaretools.trace_decorator as trace_decorator

PROGRAM_NAME="Firmware Inventory GUI"
PROGRAM_VERSION="1.0"

class InventoryFirmware:
    GLADE_FILE = '/glade/inventory_firmware_gui.glade'
    def __init__(self):
        self.wTree = gtk.glade.XML(TOPDIR + self.GLADE_FILE)
        self.wTree.signal_autoconnect(self)
        self.main_window = self.wTree.get_widget("MainWindow")

        # create model for src treeview
        self.inventoryTreeview = self.wTree.get_widget("inventory_treeview")
        self.inventoryTreeModel= gtk.TreeStore(gobject.TYPE_BOOLEAN, gobject.TYPE_STRING, gobject.TYPE_STRING)
        self.inventoryTreeview.set_model(self.inventoryTreeModel)
        self.COLUMN_DEVICE_ENABLE_UPDATE = 0
        self.COLUMN_DEVICE_DISPLAY_NAME = 1
        self.COLUMN_DEVICE_CUR_FW_VER = 2

        # add column headers to the src treeview
        self.inventoryTreeview.set_headers_visible(True)
        renderer=gtk.CellRendererToggle()
        column=gtk.TreeViewColumn("Enable Update",renderer, text=self.COLUMN_DEVICE_ENABLE_UPDATE)
        column.set_resizable(True)
        self.inventoryTreeview.append_column(column)

        renderer=gtk.CellRendererText()
        column=gtk.TreeViewColumn("Display Name",renderer, text=self.COLUMN_DEVICE_DISPLAY_NAME)
        column.set_resizable(True)
        self.inventoryTreeview.append_column(column)

        renderer=gtk.CellRendererText()
        column=gtk.TreeViewColumn("Current Firmware Version",renderer, text=self.COLUMN_DEVICE_DISPLAY_NAME)
        column.set_resizable(True)
        self.inventoryTreeview.append_column(column)

        # let us select multiple releases
        self.inventoryTreeview.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # get handle to status bar
        self.statusBar = self.wTree.get_widget("main_window_status_bar")

        # make sure to do this after all gui elements have been set up.
        # set up mappers and unit of work. populate treeviews
        self.tooltips = gtk.Tooltips()

        # show main window
        self.main_window.show()


    def menu_help_about(self, *args):
        wTree = gtk.glade.XML(TOPDIR + self.GLADE_FILE, "about")
        wTree.get_widget("about").set_property('name',PROGRAM_NAME)
        wTree.get_widget("about").set_property('version',PROGRAM_VERSION)
        # 'run' will make this dialog modal
        wTree.get_widget("about").run()

    def on_file_quit(self, *args):
        self.on_quit_app( allowCancel = 1 )

    def on_quit_app(self, *args, **kargs):
        gtk.main_quit()




def main():
    pretty = 0

    global TOPDIR
    TOPDIR = ""
    verbose = 0
    warnings = 0
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvwt:", ["help", "verbose", "warnings", "topdir="])
        for option, argument in opts:
            if option in ("-h", "--help"):
                print __doc__
                sys.exit(1)
            if option in ("-v", "--verbose"):
                verbose = verbose + 1
                trace_decorator.debug["__main__"] = verbose
            if option in ("-w", "--warnings"):
                warnings = warnings + 1
            if option in ("-t", "--topdir"):
                TOPDIR = argument

        gnome.init(PROGRAM_NAME, PROGRAM_VERSION)
        test = InventoryFirmware()
        gtk.main()

    except (getopt.GetoptError):
        print __doc__
        sys.exit(1)

    except:
        traceback.print_exc()
        sys.exit(2)

    sys.exit(0)

def _info(type, value, tb):
    # exception dialog code from: Gustavo J A M Carneiro <gjc at inescporto.pt>
    # http://www.daa.com.au/pipermail/pygtk/attachments/20030828/2d304204/gtkexcepthook.py
    # license: "The license is whatever you want."
    # http://www.daa.com.au/pipermail/pygtk/2003-August/005777.html
    # Bugfixes by Michael Brown <michael_e_brown at dell.com>
    dialog = gtk.MessageDialog(parent=None,
                   flags=0,
                   type=gtk.MESSAGE_WARNING,
                   buttons=gtk.BUTTONS_NONE,
                   message_format=_(
    "<big><b>A programming error has been detected during the execution of this program.</b></big>"
    "\n\nIt probably isn't fatal, but should be reported to the developers nonetheless."))
    dialog.set_title(_("Bug Detected"))
    dialog.set_property("has-separator", False)
    dialog.vbox.get_children()[0].get_children()[1].set_property("use-markup", True)

    dialog.add_button(_("Show Details"), 1)
    dialog.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)

    # Details
    textview = gtk.TextView(); textview.show()
    textview.set_editable(False)
    textview.modify_font(pango.FontDescription("Monospace"))
    sw = gtk.ScrolledWindow(); sw.show()
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    sw.add(textview)
    frame = gtk.Frame();
    frame.set_shadow_type(gtk.SHADOW_IN)
    frame.add(sw)
    frame.set_border_width(6)
    dialog.vbox.add(frame)
    textbuffer = textview.get_buffer()
    trace = cStringIO.StringIO()
    traceback.print_exception(type, value, tb, None, trace)
    textbuffer.set_text(trace.getvalue())
    textview.set_size_request(gtk.gdk.screen_width()/2, gtk.gdk.screen_height()/3)

    dialog.details = frame
    dialog.set_position(gtk.WIN_POS_CENTER)
    dialog.set_gravity(gtk.gdk.GRAVITY_CENTER)
    
    while 1:
        resp = dialog.run()
        if resp == 1:
            dialog.details.show()
            dialog.action_area.get_children()[1].set_sensitive(0)
            continue
        else: 
            dialog.destroy()
            break

if __name__ == "__main__":
    sys.excepthook = _info
    main()

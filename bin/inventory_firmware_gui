#!/usr/bin/python2
# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:tw=0
"""
    this is the documentation...
"""

# import arranged alphabetically
import ConfigParser
import commands
import cStringIO
import getopt
from gettext import gettext as _
import os
import pygtk
import sys
import traceback

pygtk.require('2.0')
import gtk, gtk.glade, pango
import gobject
import gnome.ui

import firmwaretools.trace_decorator as trace_decorator
import firmwaretools.guihelpers as guihelpers
import firmwaretools.repository as repository
import firmwaretools.clifuncs
import firmwaretools.package

PROGRAM_NAME="Firmware Inventory and Update GUI"
version="1.4.3"

# bugs:
#   circular dependency:
#       allow-downgrade
#       select downgrade
#       disallow-downgrade
#       allow-downgrade
#       undo
#       BANG
#     Fix by unpinning any downgraded packages if allow-downgrade de-selected.

class CommandAlreadyExecuted(Exception): pass
class CommandAlreadyUndone(Exception): pass
class Command(object):
    def __init__(self, object, method, args, kargs):
        self.object = object
        self.method = method
        self.args = args
        self.kargs = kargs
        self.memento = None
        self.executed = False
        self.undone = False

    def execute(self):
        if self.executed:
            raise CommandAlreadyExecuted()
        self.executed=True
        self.undone = False
        self.memento = self.object.getMemento()
        self.method(*self.args, **self.kargs)

    def undo(self):
        if self.undone:
            raise CommandAlreadyUndone()
        self.undone = True
        self.executed = False
        self.object.setMemento(self.memento)

# use only for pin/unpin, it is more efficent as it doesnt save full memento
class UpdateSetPinCommand(Command):
    def execute(self):
        if self.executed:
            raise CommandAlreadyExecuted()
        self.executed=True
        self.undone = False
        self.memento = self.object.getMemento(deviceHint = self.args[0])
        self.method(*self.args, **self.kargs)

class InventoryFirmware:
    GLADE_FILE = '/glade/inventory_firmware_gui.glade'
    def __init__(self, ini):
        self.wTree = gtk.glade.XML(TOPDIR + self.GLADE_FILE)
        self.wTree.signal_autoconnect(self)
        self.main_window = self.wTree.get_widget("MainWindow")
        self.wTree.get_widget("about_dialog").destroy()

        # set up toggles
        self.toolbarAllowDowngrade = self.wTree.get_widget("toolbar_allow_downgrade")
        self.toolbarAllowReflash = self.wTree.get_widget("toolbar_allow_reflash")
        self.menuAllowDowngrade = self.wTree.get_widget("menu_allow_downgrade")
        self.menuAllowReflash = self.wTree.get_widget("menu_allow_reflash")
        self.recursiveCallback=0

        # internal accounting
        self.numDowngradeSelected = 0
        self.numReflashSelected = 0

        # create model for inventory treeview
        self.inventoryTreeView = self.wTree.get_widget("inventory_treeview")
        self.inventoryTreeModel= gtk.TreeStore(
                object,                # device or package
                gobject.TYPE_BOOLEAN,  # for device == enable update for device (checkbox),
                                       # for package == update to this package
                gobject.TYPE_INT,      # flags
                )
        self.inventoryTreeView.set_model(self.inventoryTreeModel)
        self.COLUMN_DEVICE = 0
        self.COLUMN_DEVICE_ENABLE_UPDATE = 1
        self.COLUMN_FLAGS = 2
        self.FLAG_REFLASH = 1
        self.FLAG_DOWNGRADE = 2

        # add column headers to the inventory treeview
        self.inventoryTreeView.set_headers_visible(True)

        # select, status, criticality, package name, component, type (bios/firmware/driver), current ver, repo ver

        # add column: Flash yes/no checkbox column
        renderer=gtk.CellRendererToggle()
        renderer.set_property("radio", False)
        renderer.set_property('activatable', True)
        renderer.connect('toggled', self.toggle_device_cb, self.inventoryTreeModel)
        column=gtk.TreeViewColumn("Flash",renderer)
        column.add_attribute(renderer, "active", self.COLUMN_DEVICE_ENABLE_UPDATE)
        column.set_cell_data_func(renderer, self.cell_data_func_toggle)
        self.inventoryTreeView.append_column(column)

        # add column: Display name for devices, version select for updates
        renderer=gtk.CellRendererToggle()
        renderer.set_property("radio", True)
        renderer.set_property('activatable', True)
        renderer.connect('toggled', self.toggle_update_cb, self.inventoryTreeModel)
        column=gtk.TreeViewColumn("Display Name",renderer)
        column.add_attribute(renderer, "active", self.COLUMN_DEVICE_ENABLE_UPDATE)
        column.set_resizable(True)
        renderer=gtk.CellRendererText()
        column.pack_start(renderer)
        column.set_cell_data_func(renderer, self.cell_data_func_display_name)
        self.inventoryTreeView.append_column(column)
        self.inventoryTreeView.set_expander_column(column)

        # add column: Firmware version
        renderer = gtk.CellRendererText()
        column=gtk.TreeViewColumn("Current Version",renderer)
        column.set_cell_data_func(renderer, self.cell_data_func_version)
        column.set_resizable(True)
        self.inventoryTreeView.append_column(column)

        # let us select multiple releases
        self.inventoryTreeView.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # get handle to status bar
        self.statusBar = self.wTree.get_widget("main_window_status_bar")
        ctx = self.statusBar.get_context_id("main")
        self.statusBar.push(ctx, "Ready")

        # make sure to do this after all gui elements have been set up.
        # set up mappers and unit of work. populate treeviews
        self.tooltips = gtk.Tooltips()

        # show main window
        self.main_window.show()

        # set status == collecting inventory
        ctx = self.statusBar.get_context_id("inventory")
        self.statusBar.push(ctx, "Performing system inventory...")
        guihelpers.gtkYield() # make sure current GUI is fully displayed

        # special function to make sure GUI updates smoothly while we
        # generate the update set
        def myYield(*args, **kargs):
            # eats all its args...
            guihelpers.gtkYield()

        # collect inventory
        r = firmwaretools.repository.Repository( ini.get("main", "storage_topdir") )
        firmwaretools.package.RepositoryPackage.mainIni = ini
        self.updateSet = repository.generateUpdateSet(r, firmwaretools.clifuncs.runInventory(ini), cb=(myYield, None))

        self._populate()
        self.inventoryTreeView.expand_all()

        # set status == ready
        self.statusBar.pop(ctx)

        # set up command stack, used for undo/redo
        self.commandStack = []
        self.redoStack = []

    # this is a helper function to initially populate the tree model.
    # should only ever be called once.
    def _populate(self):
        self.inventoryTreeModel.clear()
        for device in self.updateSet.iterDevices():
            guihelpers.gtkYield()
            flags = 0
            toggle=False
            if self.updateSet.getUpdatePackageForDevice(device) is not None:
                toggle=True
            iter = self.inventoryTreeModel.append(None, [device, toggle, flags])
            for availPkg in self.updateSet.iterAvailableUpdates(device):
                guihelpers.gtkYield()
                flags = 0
                if device.compareVersion(availPkg) == 0:
                    flags = flags | self.FLAG_REFLASH
                if device.compareVersion(availPkg) > 0:
                    flags = flags | self.FLAG_DOWNGRADE
                toggle=False
                if self.updateSet.getUpdatePackageForDevice(device) == availPkg:
                    toggle=True
                self.inventoryTreeModel.append(iter, [availPkg, toggle, flags])
   
    # refresh the display when something happens behind the scenes. Should be rarely used.
    def _refresh(self):
        self._refresh_update_enable_toggles()
        self._refresh_allow_toggles()

    # only refreshes the toggles and radio buttons to reflect current package set.
    def _refresh_update_enable_toggles(self):
        for i in range(self.inventoryTreeModel.iter_n_children(None)):
            device_path = self.inventoryTreeModel.get_path(self.inventoryTreeModel.iter_nth_child(None, i))
            device = self.inventoryTreeModel[device_path][self.COLUMN_DEVICE]
            if self.updateSet.getUpdatePackageForDevice(device) is not None:
                self.inventoryTreeModel[device_path][self.COLUMN_DEVICE_ENABLE_UPDATE]=True
            else:
                self.inventoryTreeModel[device_path][self.COLUMN_DEVICE_ENABLE_UPDATE]=False

            self._fixupChildren(self.inventoryTreeModel, self.inventoryTreeModel.get_iter(device_path))

    # refreshes allow reflash/downgrade toggles
    def _refresh_allow_toggles(self):
        self.recursiveCallback=1
        self.menuAllowDowngrade.set_property("active", self.updateSet.allowDowngrade)
        self.menuAllowReflash.set_property("active", self.updateSet.allowReflash)
        self.toolbarAllowDowngrade.set_property("active", self.updateSet.allowDowngrade)
        self.toolbarAllowReflash.set_property("active", self.updateSet.allowReflash)
        self.recursiveCallback=0

    def cell_data_func_display_name(self, column, cell, model, iter):
        pyobj = model.get_value(iter,self.COLUMN_DEVICE)
        renderers = column.get_cell_renderers()
        text = str(pyobj)
        if isinstance(pyobj, firmwaretools.package.Device):
            renderers[0].set_property("visible", False)
            renderers[1].set_property("text", text)
        else:
            flags = model.get_value(iter,self.COLUMN_FLAGS)
            renderers[0].set_property("visible", True)
            parentIter = model.iter_parent(iter)
            device = model.get_value(parentIter,self.COLUMN_DEVICE)
            text = str(pyobj.version)

            renderers[1].set_property("text", "Available Version: %s" % text)
            renderers[0].set_property('activatable', True)

            if not model.get_value(parentIter, self.COLUMN_DEVICE_ENABLE_UPDATE):
                renderers[0].set_property('activatable', False)

            if self.updateSet.getSuggestedUpdatePackageForDevice(device) == pyobj:
                renderers[1].set_property("text", "Available Version: %s  (suggested)" % text)

            if flags & self.FLAG_REFLASH:
                renderers[1].set_property("text", "Available Version: %s  (reflash)" % text)
                if not self.updateSet.allowReflash: 
                    renderers[0].set_property('activatable', False)

            if flags & self.FLAG_DOWNGRADE:
                renderers[1].set_property("text", "Available Version: %s  (downgrade)" % text)
                if not self.updateSet.allowDowngrade:
                    renderers[0].set_property('activatable', False)


    def cell_data_func_version(self, column, cell, model, iter):
        pyobj = model.get_value(iter,self.COLUMN_DEVICE)
        if isinstance(pyobj, firmwaretools.package.Device):
            cell.set_property("visible", True)
            cell.set_property("text", pyobj.version)
        else:
            cell.set_property("visible", False)

    def cell_data_func_toggle(self, column, cell, model, iter):
        pyobj = model.get_value(iter,self.COLUMN_DEVICE)
        if isinstance(pyobj, firmwaretools.package.Device):
            cell.set_property("visible", True)
        else:
            cell.set_property("visible", False)

    def toggle_device_cb(self, renderer, path, model, *args, **kargs):
        model[path][self.COLUMN_DEVICE_ENABLE_UPDATE] = not model[path][self.COLUMN_DEVICE_ENABLE_UPDATE]
        device = model[path][self.COLUMN_DEVICE]
        if model[path][self.COLUMN_DEVICE_ENABLE_UPDATE]:
            # unpin it and calculated pkg takes over
            self._executeCommand(UpdateSetPinCommand(self.updateSet, self.updateSet.unPinDevice, (device,), {}))
        else:
            # pin it to None to disable update for this device
            self._executeCommand(UpdateSetPinCommand(self.updateSet, self.updateSet.pinUpdatePackage, (device, None), {}))

        self._fixupChildren(model, model.get_iter(path))

    def toggle_update_cb(self, renderer, path, model, *args, **kargs):
        iter = model.get_iter(path)
        parentIter = model.iter_parent(iter)
        device = model.get_value(parentIter, self.COLUMN_DEVICE)
        update = model[path][self.COLUMN_DEVICE]

        self._executeCommand(UpdateSetPinCommand(self.updateSet, self.updateSet.pinUpdatePackage, (device, update), {}))
        self._fixupChildren(model, parentIter)

    # this method sets the enable toggle on packages appropriately
    # it also interlocks the allow reflash/downgrade toggles
    def _fixupChildren(self, model, iter):
        for i in range(model.iter_n_children(iter)):
            child_path = model.get_path(model.iter_nth_child(iter, i))
            curValue = model[child_path][self.COLUMN_DEVICE_ENABLE_UPDATE]
            if model[child_path][self.COLUMN_DEVICE] == self.updateSet.getUpdatePackageForDevice(model.get_value(iter,self.COLUMN_DEVICE)):
                if curValue == False and model[child_path][self.COLUMN_FLAGS] & self.FLAG_DOWNGRADE:
                    self.numDowngradeSelected = self.numDowngradeSelected + 1
                if curValue == False and model[child_path][self.COLUMN_FLAGS] & self.FLAG_REFLASH:
                    self.numReflashSelected = self.numReflashSelected + 1
                model[child_path][self.COLUMN_DEVICE_ENABLE_UPDATE] = True
            else:
                if curValue == True and model[child_path][self.COLUMN_FLAGS] & self.FLAG_DOWNGRADE:
                    self.numDowngradeSelected = self.numDowngradeSelected - 1
                if curValue == True and model[child_path][self.COLUMN_FLAGS] & self.FLAG_REFLASH:
                    self.numReflashSelected = self.numReflashSelected - 1
                model[child_path][self.COLUMN_DEVICE_ENABLE_UPDATE] = False

    def on_allow_downgrade_toggled(self, widget, *args, **kargs):
        # guard against executeCommand being called while we are in a refresh
        if not self.recursiveCallback:
            if self.numDowngradeSelected > 0:
                active = 1
            else:
                active = widget.get_active()
            self._executeCommand(Command(self.updateSet, self.updateSet.setAllowDowngrade, (active,), {}))
            self._refresh_allow_toggles()

    def on_allow_reflash_toggled(self, widget, *args, **kargs):
        # guard against executeCommand being called while we are in a refresh
        if not self.recursiveCallback:
            if self.numReflashSelected > 0:
                active = 1
            else:
                active = widget.get_active()
            self._executeCommand(Command(self.updateSet, self.updateSet.setAllowReflash, (active,), {}))
            self._refresh_allow_toggles()

    def on_toolbar_allow_downgrade_set_focus_child(self, *args, **kargs):
        print "on_toolbar_allow_downgrade_set_focus_child"

    def on_toolbar_allow_downgrade_focus(self, *args, **kargs):
        print "focus"

    def on_toolbar_allow_downgrade_focus_in_event(self, *args, **kargs):
        print "focus in event"
        if self.numReflashSelected:
            ctx = self.statusBar.get_context_id("allow downgrade")
            self.statusBar.push(ctx, "Cannot deactive 'Allow Downgrade' because some downgraded packages are selected.")

    def on_toolbar_allow_downgrade_focus_out_event(self, *args, **kargs):
        print "focus out event"
        ctx = self.statusBar.get_context_id("allow downgrade")
        self.statusBar.pop(ctx)

    def on_help_about(self, *args):
        wTree = gtk.glade.XML(TOPDIR + self.GLADE_FILE, "about_dialog")
        wTree.get_widget("about_dialog").set_property('name',PROGRAM_NAME)
        wTree.get_widget("about_dialog").set_property('version',version)
        wTree.get_widget("about_dialog").run() # modal until 'close'
        wTree.get_widget("about_dialog").destroy()

    def _executeCommand(self, command):
        command.execute()
        self.commandStack.append(command)
        self.redoStack = []
        self._condEnableUndoRedo()
        if len(self.commandStack) > 20:
            self.commandStack = self.commandStack[-20:]

    def on_undo_activate(self, *args, **kargs):
        if self.commandStack:
            command = self.commandStack.pop()
            command.undo()
            self.redoStack.append(command)

        self._condEnableUndoRedo()
        self._refresh()

    def on_redo_activate(self, *args, **kargs):
        if self.redoStack:
            command = self.redoStack.pop()
            command.execute()
            self.commandStack.append(command)

        self._condEnableUndoRedo()
        self._refresh()

    def on_reset_activate(self, *args, **kargs):
        self.updateSet.reset()
        self.commandStack = []
        self.redoStack = []
        self._condEnableUndoRedo()
        self.updateSet.setAllowReflash(0)
        self.updateSet.setAllowDowngrade(0)
        self._refresh()

    def _condEnableUndoRedo(self):
        if self.commandStack:
            pass # TODO: enable undo buttons
        else:
            pass # TODO: disable undo buttons

        if self.redoStack:
            pass # TODO: enable undo buttons
        else:
            pass # TODO: disable undo buttons

    def on_update_now_activate(self, *args, **kargs):
        print "Going to update the following devices:"
        for device in self.updateSet.iterDevices():
            pkg = self.updateSet.getUpdatePackageForDevice(device)
            if pkg is not None:
                print "\t%s" % str(device)
                print "\t\tFrom Version: %s" % device.version
                print "\t\tTo Version  : %s" % pkg.version
                print

    def on_file_quit(self, *args):
        self.on_quit_app( allowCancel = 1 )

    def on_quit_app(self, *args, **kargs):
        # check kargs['allowCancel']
        gtk.main_quit()


def main():
    pretty = 0

    global TOPDIR
    TOPDIR = "/usr/share/firmware-tools/"
    ini = ConfigParser.ConfigParser()
    verbose = 0
    warnings = 0
    altConfig = 0
    overrides = []
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvwt:c:o:", ["help", "verbose", "warnings", "topdir=", "config=", "overrides=",])
        for option, argument in opts:
            if option in ("-h", "--help"):
                print __doc__
                sys.exit(1)
            if option in ("-c", "--config"):
                firmwaretools.clifuncs.getConfig(ini, [argument,])
                altConfig = 1
            if option in ("-o", "--override"):
                overrides.append(argument)
            if option in ("-v", "--verbose"):
                verbose = verbose + 1
                trace_decorator.debug["__main__"] = verbose
            if option in ("-w", "--warnings"):
                warnings = warnings + 1
            if option in ("-t", "--topdir"):
                TOPDIR = argument

        # load standard configuration
        if not altConfig:
            firmwaretools.clifuncs.getConfig(ini, firmwaretools.clifuncs.configLocations)

        for over in overrides:
            section, key, value = over.split(",", 2)
            if not ini.has_section(section):
                ini.add_section(section)
            ini.set(section, key, value)

        gnome.init(PROGRAM_NAME, version)
        test = InventoryFirmware(ini)
        gtk.main()

    except (getopt.GetoptError):
        print __doc__
        sys.exit(1)

    except:
        traceback.print_exc()
        sys.exit(2)

    sys.exit(0)

def _info(type, value, tb):
    # exception dialog code from: Gustavo J A M Carneiro <gjc at inescporto.pt>
    # http://www.daa.com.au/pipermail/pygtk/attachments/20030828/2d304204/gtkexcepthook.py
    # license: "The license is whatever you want."
    # http://www.daa.com.au/pipermail/pygtk/2003-August/005777.html
    # Bugfixes by Michael Brown <michael_e_brown at dell.com>
    dialog = gtk.MessageDialog(parent=None,
                   flags=0,
                   type=gtk.MESSAGE_WARNING,
                   buttons=gtk.BUTTONS_NONE,
                   message_format=_(
    "<big><b>A programming error has been detected during the execution of this program.</b></big>"
    "\n\nIt probably isn't fatal, but should be reported to the developers nonetheless."))
    dialog.set_title(_("Bug Detected"))
    dialog.set_property("has-separator", False)
    dialog.vbox.get_children()[0].get_children()[1].set_property("use-markup", True)

    dialog.add_button(_("Show Details"), 1)
    dialog.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)

    # Details
    textview = gtk.TextView(); textview.show()
    textview.set_editable(False)
    textview.modify_font(pango.FontDescription("Monospace"))
    sw = gtk.ScrolledWindow(); sw.show()
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    sw.add(textview)
    frame = gtk.Frame();
    frame.set_shadow_type(gtk.SHADOW_IN)
    frame.add(sw)
    frame.set_border_width(6)
    dialog.vbox.add(frame)
    textbuffer = textview.get_buffer()
    trace = cStringIO.StringIO()
    traceback.print_exception(type, value, tb, None, trace)
    textbuffer.set_text(trace.getvalue())
    textview.set_size_request(gtk.gdk.screen_width()/2, gtk.gdk.screen_height()/3)

    dialog.details = frame
    dialog.set_position(gtk.WIN_POS_CENTER)
    dialog.set_gravity(gtk.gdk.GRAVITY_CENTER)

    while 1:
        resp = dialog.run()
        if resp == 1:
            dialog.details.show()
            dialog.action_area.get_children()[1].set_sensitive(0)
            continue
        else:
            dialog.destroy()
            break

if __name__ == "__main__":
    sys.excepthook = _info
    main()

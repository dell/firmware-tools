#!/usr/bin/python2
# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:tw=0
"""
    this is the documentation...
"""

# import arranged alphabetically
import ConfigParser
import commands
import cStringIO
import getopt
from gettext import gettext as _
import os
import pygtk
import sys
import traceback

pygtk.require('2.0')
import gtk, gtk.glade, pango
import gobject
import gnome.ui

import firmwaretools.trace_decorator as trace_decorator
import firmwaretools.guihelpers as guihelpers
import firmwaretools.repository as repository
import firmwaretools.clifuncs
import firmwaretools.package

PROGRAM_NAME="Firmware Inventory GUI"
PROGRAM_VERSION="1.0"

class InventoryFirmware:
    GLADE_FILE = '/glade/inventory_firmware_gui.glade'
    def __init__(self, ini):
        self.wTree = gtk.glade.XML(TOPDIR + self.GLADE_FILE)
        self.wTree.signal_autoconnect(self)
        self.main_window = self.wTree.get_widget("MainWindow")
        self.wTree.get_widget("about_dialog").destroy()

        # create model for src treeview
        self.inventoryTreeView = self.wTree.get_widget("inventory_treeview")
        self.inventoryTreeModel= gtk.TreeStore(
                object,                # device or package
                gobject.TYPE_BOOLEAN,  # for device == enable update for device (checkbox),
                                       # for package == update to this package
                gobject.TYPE_STRING,   # display name
                gobject.TYPE_STRING    # version
                )
        self.inventoryTreeView.set_model(self.inventoryTreeModel)
        self.COLUMN_DEVICE = 0
        self.COLUMN_DEVICE_ENABLE_UPDATE = 1
        self.COLUMN_DEVICE_DISPLAY_NAME = 2
        self.COLUMN_DEVICE_FW_VER = 3

        # add column headers to the src treeview
        self.inventoryTreeView.set_headers_visible(True)
        renderer=gtk.CellRendererToggle()
        renderer.set_property('activatable', True)
        renderer.connect('toggled', self.toggle_enabled_cb, self.inventoryTreeModel)
        column=gtk.TreeViewColumn("Enable",renderer)
        column.add_attribute(renderer, "active", self.COLUMN_DEVICE_ENABLE_UPDATE)
        column.set_cell_data_func(renderer, self.cell_data_func, data=self)
        self.inventoryTreeView.append_column(column)

        renderer=gtk.CellRendererText()
        column=gtk.TreeViewColumn("Display Name",renderer, text=self.COLUMN_DEVICE_DISPLAY_NAME)
        column.set_resizable(True)
        self.inventoryTreeView.append_column(column)
        self.inventoryTreeView.set_expander_column(column)

        renderer=gtk.CellRendererText()
        column=gtk.TreeViewColumn("Firmware Version",renderer, text=self.COLUMN_DEVICE_FW_VER)
        column.set_resizable(True)
        self.inventoryTreeView.append_column(column)

        # let us select multiple releases
        self.inventoryTreeView.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # get handle to status bar
        self.statusBar = self.wTree.get_widget("main_window_status_bar")
        ctx = self.statusBar.get_context_id("main")
        self.statusBar.push(ctx, "Ready")

        # make sure to do this after all gui elements have been set up.
        # set up mappers and unit of work. populate treeviews
        self.tooltips = gtk.Tooltips()

        # show main window
        self.main_window.show()

        # set status == collecting inventory
        ctx = self.statusBar.get_context_id("inventory")
        self.statusBar.push(ctx, "Performing system inventory...")

        # special function to make sure GUI updates smoothly while we
        # generate the update set
        def myYield(*args, **kargs):
            # eats all its args...
            guihelpers.gtkYield()

        # make sure current GUI is fully displayed
        guihelpers.gtkYield()

        # collect inventory
        r = firmwaretools.repository.Repository( ini.get("main", "storage_topdir") )
        firmwaretools.package.RepositoryPackage.mainIni = ini
        self.updateSet = repository.generateUpdateSet(r, firmwaretools.clifuncs.runInventory(ini), cb=(myYield, None))

        self._populate()
        self.inventoryTreeView.expand_all()

        # set status == ready
        self.statusBar.pop(ctx)

    def _populate(self):
        self.inventoryTreeModel.clear()
        for device in self.updateSet.iterDevices():
            guihelpers.gtkYield()
            iter = self.inventoryTreeModel.append(None, [device, True, str(device), device.version])
            for availPkg in self.updateSet.iterAvailableUpdates(device):
                guihelpers.gtkYield()
                self.inventoryTreeModel.append(iter, [availPkg, False, str(availPkg), availPkg.version])

    #
    # treeview toggle related
    #
    def cell_data_func(self, column, renderer, model, iter):
        pyobj = model.get_value(iter,self.COLUMN_DEVICE)
        print "pyobj class: %s" % pyobj.__class__
        if isinstance(pyobj, firmwaretools.package.Device):
            renderer.set_property("radio", "false")
        else:
            renderer.set_property("radio", "true")

    def toggle_enabled_cb(self, renderer, path, user_data, *args, **kargs):
        model = user_data
        model[path][self.COLUMN_DEVICE_ENABLE_UPDATE] = not model[path][self.COLUMN_DEVICE_ENABLE_UPDATE]
    #
    # end toggle functions
    #

    def on_help_about(self, *args):
        wTree = gtk.glade.XML(TOPDIR + self.GLADE_FILE, "about_dialog")
        wTree.get_widget("about_dialog").set_property('name',PROGRAM_NAME)
        wTree.get_widget("about_dialog").set_property('version',PROGRAM_VERSION)
        # 'run' will make this dialog modal
        wTree.get_widget("about_dialog").run()
        wTree.get_widget("about_dialog").destroy()

    def on_file_quit(self, *args):
        self.on_quit_app( allowCancel = 1 )

    def on_quit_app(self, *args, **kargs):
        # check kargs['allowCancel']
        gtk.main_quit()


def main():
    pretty = 0

    global TOPDIR
    TOPDIR = ""
    ini = ConfigParser.ConfigParser()
    verbose = 0
    warnings = 0
    altConfig = 0
    overrides = []
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvwt:c:o:", ["help", "verbose", "warnings", "topdir=", "config=", "overrides=",])
        for option, argument in opts:
            if option in ("-h", "--help"):
                print __doc__
                sys.exit(1)
            if option in ("-c", "--config"):
                firmwaretools.clifuncs.getConfig(ini, [argument,])
                altConfig = 1
            if option in ("-o", "--override"):
                overrides.append(argument)
            if option in ("-v", "--verbose"):
                verbose = verbose + 1
                trace_decorator.debug["__main__"] = verbose
            if option in ("-w", "--warnings"):
                warnings = warnings + 1
            if option in ("-t", "--topdir"):
                TOPDIR = argument

        # load standard configuration
        if not altConfig:
            firmwaretools.clifuncs.getConfig(ini, firmwaretools.clifuncs.configLocations)

        for over in overrides:
            section, key, value = over.split(",", 2)
            if not ini.has_section(section):
                ini.add_section(section)
            ini.set(section, key, value)


        gnome.init(PROGRAM_NAME, PROGRAM_VERSION)
        test = InventoryFirmware(ini)
        gtk.main()

    except (getopt.GetoptError):
        print __doc__
        sys.exit(1)

    except:
        traceback.print_exc()
        sys.exit(2)

    sys.exit(0)

def _info(type, value, tb):
    # exception dialog code from: Gustavo J A M Carneiro <gjc at inescporto.pt>
    # http://www.daa.com.au/pipermail/pygtk/attachments/20030828/2d304204/gtkexcepthook.py
    # license: "The license is whatever you want."
    # http://www.daa.com.au/pipermail/pygtk/2003-August/005777.html
    # Bugfixes by Michael Brown <michael_e_brown at dell.com>
    dialog = gtk.MessageDialog(parent=None,
                   flags=0,
                   type=gtk.MESSAGE_WARNING,
                   buttons=gtk.BUTTONS_NONE,
                   message_format=_(
    "<big><b>A programming error has been detected during the execution of this program.</b></big>"
    "\n\nIt probably isn't fatal, but should be reported to the developers nonetheless."))
    dialog.set_title(_("Bug Detected"))
    dialog.set_property("has-separator", False)
    dialog.vbox.get_children()[0].get_children()[1].set_property("use-markup", True)

    dialog.add_button(_("Show Details"), 1)
    dialog.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)

    # Details
    textview = gtk.TextView(); textview.show()
    textview.set_editable(False)
    textview.modify_font(pango.FontDescription("Monospace"))
    sw = gtk.ScrolledWindow(); sw.show()
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    sw.add(textview)
    frame = gtk.Frame();
    frame.set_shadow_type(gtk.SHADOW_IN)
    frame.add(sw)
    frame.set_border_width(6)
    dialog.vbox.add(frame)
    textbuffer = textview.get_buffer()
    trace = cStringIO.StringIO()
    traceback.print_exception(type, value, tb, None, trace)
    textbuffer.set_text(trace.getvalue())
    textview.set_size_request(gtk.gdk.screen_width()/2, gtk.gdk.screen_height()/3)

    dialog.details = frame
    dialog.set_position(gtk.WIN_POS_CENTER)
    dialog.set_gravity(gtk.gdk.GRAVITY_CENTER)

    while 1:
        resp = dialog.run()
        if resp == 1:
            dialog.details.show()
            dialog.action_area.get_children()[1].set_sensitive(0)
            continue
        else:
            dialog.destroy()
            break

if __name__ == "__main__":
    sys.excepthook = _info
    main()

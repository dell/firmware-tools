#!/usr/bin/python
# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:tw=0

  #############################################################################
  #
  # Copyright (c) 2005 Dell Computer Corporation
  # Dual Licenced under GNU GPL and OSL
  #
  #############################################################################
"""bootstrap_firmware: 

usage:
    -h | --help         print this message
    -c | --config       Location of an additional config file to import
    -b | --bootstrap    run inventory in bootstrap mode
"""

from __future__ import generators

# import arranged alphabetically
import getopt
import os
import sys
import ConfigParser

# our modules
import firmwaretools.clifuncs
import firmwaretools.trace_decorator as trace_decorator

class CmdlineError(Exception):pass

def debianCleanName(s):
    s = s.replace('_', '-')
    s = s.replace('(', '-')
    s = s.replace(')', '')
    s = s.lower()
    return s

def main():
    global firmwaretools # so we can import more submodules below...
    ini = ConfigParser.ConfigParser()
    altConfig = 0
    overrides = []
    commaSeparated=0
    verbose=0
    aptMode = 0

    try:
        opts, args = getopt.getopt(sys.argv[1:], "bc:fho:uav", ["help", "config=", "overrides=", "up2date_mode", "apt_mode", "bootstrap", "verbose", "fake-mode"])
        for option, argument in opts:
            if option in ("-h", "--help"):
                print __doc__
                sys.exit(0)
            if option in ("-c", "--config"):
                firmwaretools.clifuncs.getConfig(ini, [argument,])
                altConfig = 1
            if option in ("-u", "--up2date_mode"):
                commaSeparated=1
            if option in ("-a", "--apt_mode"):
                aptMode = 1
            if option in ("-o", "--override"):
                overrides.append(argument)
            if option in ("-b", "--bootstrap"):
                pass # ignore for backwards compat
            if option in ("-v", "--verbose",):
                verbose = verbose + 1
                trace_decorator.debug["__main__"] = verbose
            if option in ("-f", "--fake-mode"):
                os.environ['DEBUG_REPOSITORY'] = "1"
                os.environ['DEBUG_INVENTORY'] = "1"
                os.environ['DEBUG_BOOTSTRAP'] = "1"
                import firmwaretools.mockrepository
                import firmwaretools.mockpackage

        # load standard configuration
        if not altConfig:
            firmwaretools.clifuncs.getConfig(ini, firmwaretools.clifuncs.configLocations)

        for over in overrides:
            section, key, value = over.split(",", 2)
            if not ini.has_section(section):
                ini.add_section(section)
            ini.set(section, key, value)

        for pkg in firmwaretools.clifuncs.runBootstrapInventory(ini):
            if aptMode:
                sys.stdout.write( "%s " % debianCleanName(pkg.name) )
            elif commaSeparated:
                sys.stdout.write( "%s," % pkg.name )
            else:
                print "%s" % pkg.name


    except CmdlineError, e:
        print
        print e
        print
        print __doc__
        sys.exit(2)

    except (getopt.GetoptError):
        # print help information and exit:
        print __doc__
        sys.exit(2)

    return 0 #shell logic


if __name__ == "__main__":
    sys.exit( main() )


# vim:noexpandtab:autoindent:tabstop=8:shiftwidth=8:filetype=make:nocindent:tw=0:
#  This is a template of all of the 'Standard' stuff that we use in all our
#  projects.

AUTOMAKE_OPTIONS = subdir-objects
SUBDIRS = 

# dont move these 5 lines, as this is how we override the autoconf version and package name
RELEASE_NAME=@RELEASE_NAME@
RELEASE_MAJOR=@RELEASE_MAJOR@
RELEASE_MINOR=@RELEASE_MINOR@
RELEASE_SUBLEVEL=@RELEASE_SUBLEVEL@
RELEASE_EXTRALEVEL=@RELEASE_EXTRALEVEL@

RELEASE_VERSION = $(RELEASE_MAJOR).$(RELEASE_MINOR).$(RELEASE_SUBLEVEL)$(RELEASE_EXTRALEVEL)
RELEASE_STRING = $(RELEASE_NAME)-$(RELEASE_VERSION)
VERSION = $(RELEASE_VERSION)
PACKAGE = $(RELEASE_NAME)

CLEANFILES=$(RELEASE_NAME)-*.tar.gz $(RELEASE_NAME)-*.tar.bz2 $(RELEASE_NAME)-*.rpm _buildtemp version
DISTCLEANFILES=*~ 

EXTRA_DIST =
EXTRA_PROGRAMS=

CLEANFILES += $(EXTRA_PROGRAMS)
CLEANFILES += *.pyc */*.pyc */*/*.pyc */*/*/*.pyc
CLEANFILES += pkg/$(PACKAGE).spec

dist: ChangeLog AUTHORS
ChangeLog:
	(GIT_DIR=.git git-log > .changelog.tmp && mv .changelog.tmp ChangeLog; rm -f .changelog.tmp) || (touch ChangeLog; echo 'git directory not found: installing possibly empty changelog.' >&2)

AUTHORS:
	(GIT_DIR=.git git-log | grep ^Author | sort |uniq > .authors.tmp && mv .authors.tmp AUTHORS; rm -f .authors.tmp) || (touch AUTHORS; echo 'git directory not found: installing possibly empty AUTHORS.' >&2)

install-data-hook:
	for i in $(REPLACE_VARS_ON_INSTALL); do      \
	    file=$(DESTDIR)/$$i                     ;\
	    perl -p -i -e 's|^__VERSION__\s*=.*|__VERSION__="$(RELEASE_VERSION)"|' $$file ;\
	    perl -p -i -e 's|^SYSCONFDIR\s*=.*|SYSCONFDIR="$(sysconfdir)"|' $$file        ;\
	    perl -p -i -e 's|^PYTHONDIR\s*=.*|PYTHONDIR="$(pythondir)"|' $$file           ;\
	    perl -p -i -e 's|^PKGPYTHONDIR\s*=.*|PKGPYTHONDIR="$(pkgpythondir)"|' $$file  ;\
	    perl -p -i -e 's|^PKGDATADIR\s*=.*|PKGDATADIR="$(pkgdatadir)"|' $$file        ;\
	    perl -p -i -e 's|^PKGETCDIR\s*=.*|PKGETCDIR="$(pkgetcdir)"|' $$file        ;\
	    perl -p -i -e 's|^LIBDIR\s*=.*|PKGDATADIR="$(libdir)"|' $$file        ;\
	done

install-exec-hook:
	for i in $(REPLACE_VARS_ON_INSTALL); do      \
	    file=$(DESTDIR)/$$i                     ;\
	    perl -p -i -e 's|^__VERSION__\s*=.*|__VERSION__="$(RELEASE_VERSION)"|' $$file ;\
	    perl -p -i -e 's|^SYSCONFDIR\s*=.*|SYSCONFDIR="$(sysconfdir)"|' $$file        ;\
	    perl -p -i -e 's|^PYTHONDIR\s*=.*|PYTHONDIR="$(pythondir)"|' $$file           ;\
	    perl -p -i -e 's|^PKGPYTHONDIR\s*=.*|PKGPYTHONDIR="$(pkgpythondir)"|' $$file  ;\
	    perl -p -i -e 's|^PKGDATADIR\s*=.*|PKGDATADIR="$(pkgdatadir)"|' $$file        ;\
	    perl -p -i -e 's|^PKGETCDIR\s*=.*|PKGETCDIR="$(pkgetcdir)"|' $$file        ;\
	    perl -p -i -e 's|^LIBDIR\s*=.*|PKGDATADIR="$(libdir)"|' $$file        ;\
	done

TOPDIR := $(shell cd $(top_builddir);pwd)
BUILDDIR = $(TOPDIR)/_rpmbuild
RPMDIR = $(TOPDIR)
SOURCEDIR = $(TOPDIR)
SPECDIR = $(TOPDIR)/pkg
SRCRPMDIR = $(TOPDIR)

RPM_DEFINES = --define "_topdir $(TOPDIR)" \
		--define "_builddir $(BUILDDIR)" \
		--define "_rpmdir $(RPMDIR)" \
		--define "_sourcedir $(SOURCEDIR)" \
		--define "_specdir $(SPECDIR)" \
		--define "_srcrpmdir $(SRCRPMDIR)"

.PHONY: rpm srpm
rpm: dist
	mkdir -p $(BUILDDIR)
	rpmbuild $(RPM_DEFINES) -ba --nodeps pkg/$(PACKAGE_NAME).spec
	rm -rf $(BUILDDIR)

srpm: dist
	mkdir -p $(BUILDDIR)
	rpmbuild $(RPM_DEFINES) -ba --nodeps pkg/$(PACKAGE_NAME).spec
	rm -rf $(BUILDDIR)

# This updates the debian version information, similar to how specfile for RPM
# is updated. It has to be manually invoked becuase it wont work for rpm builds.
CHANGELOG=pkg/debian/changelog
CHANGELOG_TEXT="Placeholder changelog entry. Please update this for release."
changelog: $(CHANGELOG)
.PHONY: $(CHANGELOG)
$(CHANGELOG): version.mk
	cd pkg/ && fakeroot debchange -v $(RELEASE_VERSION)-$(DEB_RELEASE) $(CHANGELOG_TEXT)

# to specify key if package is to be signed: make -e deb debsign=-k<keyname>
debsign=-uc -us

# use debopts to do things like override maintainer email, etc.
deb_destdir=$(PWD)/dist

TARBALL=$(RELEASE_STRING).tar.gz
deb: dist
	[ -n "$$DIST" ] || (echo "Must set DIST={gutsy,hardy,sid,...} for deb and sdeb targets"; exit 1)
	[ -n "$$DIST" ] || echo "Remember to set DISTTAG='~gutsy1' for deb and sdeb targets for backports"
	rm -rf _build
	mkdir -p dist  _build
	cp $(TARBALL) _build/$(RELEASE_NAME)_$(RELEASE_VERSION).orig.tar.gz
	tar -C _build -xzf $(TARBALL)
	mv _build/$(RELEASE_STRING)/pkg/debian _build/$(RELEASE_STRING)/debian
	chmod +x _build/$(RELEASE_STRING)/debian/rules
	sed -e "s/#DISTTAG#/$(DISTTAG)/g" -e "s/#DIST#/$(DIST)/g" _build/$(RELEASE_STRING)/debian/changelog.in > _build/$(RELEASE_STRING)/debian/changelog 
	rm _build/$(RELEASE_STRING)/debian/changelog.in 
	cd _build/$(RELEASE_STRING); pdebuild --use-pdebuild-internal --auto-debsign --buildresult $(PWD)/dist
	rm -rf _build

sdeb: dist
	[ -n "$$DIST" ] || (echo "Must set DIST={gutsy,hardy,sid,...} for deb and sdeb targets"; exit 1)
	[ -n "$$DIST" ] || echo "Remember to set DISTTAG='~gutsy1' for deb and sdeb targets for backports"
	rm -rf _build
	mkdir -p dist _build
	cp $(TARBALL) _build/$(RELEASE_NAME)_$(RELEASE_VERSION).orig.tar.gz
	tar -C _build -xzf $(TARBALL)
	mv _build/$(RELEASE_STRING)/pkg/debian _build/$(RELEASE_STRING)/debian
	chmod +x _build/$(RELEASE_STRING)/debian/rules
	sed -e "s/#DISTTAG#/$(DISTTAG)/g" -e "s/#DIST#/$(DIST)/g" _build/$(RELEASE_STRING)/debian/changelog.in > _build/$(RELEASE_STRING)/debian/changelog
	rm _build/$(RELEASE_STRING)/debian/changelog.in
	cd _build/$(RELEASE_STRING) ;dpkg-buildpackage -D -S -sa -rfakeroot
	mv _build/$(RELEASE_NAME)_* $(PWD)/dist
	rm -rf _build


